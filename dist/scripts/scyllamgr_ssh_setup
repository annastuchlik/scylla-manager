#!/usr/bin/env bash
#
# Copyright 2018 ScyllaDB
#

set -eu -o pipefail

OUTPUT=/dev/null

SSH_USER=""
SSH_IDENTITY_FILE=""
SSH_CONFIG_FILE=""
SSH_OPTS="-q -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

MANAGER_USER="scylla-manager"
MANAGER_IDENTITY_FILE=""

DISCOVER=0

print_usage() {
    echo "scyllamgr_ssh_setup -o <path to manager private key> [-m <manager username>] [-u <SSH username>] [-i <path to SSH private key>] [-c <path to SSH config file>] [-d] HOST..."
    echo "  -c --config-file			path to SSH configuration file, see also man ssh_config"
    echo "  -d --discover				use first host to discover and setup all hosts in a cluster"
    echo "  -i --identity-file			path to identity file containing SSH private key"
    echo "  -m --manager-user			username that will be created and configured on hosts, default ${MANAGER_USER}"
    echo "  -o --manager-identity-file		path to identity file containing SSH private key for manager username, if there is no such file it will be created"
    echo "  -u --user				SSH username used to connect to hosts"
    echo "  -v --verbose				display debug info"
}

while [[ $# > 0 ]]; do
    case "$1" in
        "-u"|"--user")
            SSH_USER="$2"
            shift 2
            ;;
        "-i"|"--identity-file")
            SSH_IDENTITY_FILE="$2"
            shift 2
            ;;
        "-c"|"--config-file")
            SSH_CONFIG_FILE="$2"
            shift 2
            ;;
        "-m"|"--manager-user")
            MANAGER_USER="$2"
            shift 2
            ;;
        "-o"|"--manager-identity-file")
            MANAGER_IDENTITY_FILE="$2"
            shift 2
            ;;
        "-d"|"--discover")
            DISCOVER=1
            shift 1
            ;;
        "-v"|"--verbose")
            OUTPUT=/dev/stderr
            SSH_OPTS+=" -v"
            shift 1
            ;;
        "-h" | "--help")
            print_usage
            exit 0
            ;;
        *)
            break
    esac
done

# Validate inputs.

if [[ $# == 0 ]]; then
    echo -e "no hosts to setup\n"
    print_usage
    exit 1
fi

if [[ -n "${SSH_IDENTITY_FILE}" && (! -f "${SSH_IDENTITY_FILE}" || ! -r "${SSH_IDENTITY_FILE}") ]]; then
    echo -e "cannot read file ${SSH_IDENTITY_FILE}\n"
    print_usage
    exit 1
fi

if [[ -n "${SSH_CONFIG_FILE}" && (! -f "${SSH_CONFIG_FILE}" || ! -r "${SSH_CONFIG_FILE}") ]]; then
    echo -e "cannot read file ${SSH_CONFIG_FILE}\n"
    print_usage
    exit 1
fi

if [[ -z "${MANAGER_USER}" ]]; then
    echo -e "missing --manager-user\n"
    print_usage
    exit 1
fi

if [[ -z "${MANAGER_IDENTITY_FILE}" ]]; then
    echo -e "missing --manager-identity-file\n"
    print_usage
    exit 1
fi

# Decorate SSH_OPTS with options.

if [[ -n ${SSH_IDENTITY_FILE} ]]; then
    SSH_OPTS+=" -i ${SSH_IDENTITY_FILE}"
fi

if [[ -n ${SSH_CONFIG_FILE} ]]; then
    SSH_OPTS+=" -F ${SSH_CONFIG_FILE}"
fi

# Append @ to user to support passing empty user to ssh. User can be configured
# in the SSH config file.

if [[ -n ${SSH_USER} ]]; then
    SSH_USER+="@"
fi

# Create manager SSH key if needed.

if [[ ! -f "${MANAGER_IDENTITY_FILE}" ]]; then
    if ! ssh-keygen -t rsa -b 2048 -N "" -f "${MANAGER_IDENTITY_FILE}" &> "${OUTPUT}" && chmod 0400 "${MANAGER_IDENTITY_FILE}"; then
        echo -e "cannot generate private key in ${MANAGER_IDENTITY_FILE}\n"
        print_usage
        exit 1
    fi
fi

if [[ ! -f "${MANAGER_IDENTITY_FILE}.pub" || ! -r "${MANAGER_IDENTITY_FILE}.pub" ]]; then
    echo -e "cannot read file ${MANAGER_IDENTITY_FILE}.pub\n"
    print_usage
    exit 1
fi

# Load manager SSH public key.

MANAGER_PUBLIC_KEY=$(<"${MANAGER_IDENTITY_FILE}.pub")

# Discover hosts if needed.

HOSTS=$@
if [[ ${DISCOVER} == 1 ]]; then
    HOSTS=`ssh ${SSH_OPTS} "${SSH_USER}${1}" 2> "${OUTPUT}" curl -sS -f localhost:10000/storage_service/host_id | jq -r '.[].key'`
fi

ret=0

for host in ${HOSTS}; do
    if ssh ${SSH_OPTS} "${SSH_USER}${host}" &> "${OUTPUT}" sudo su - << EOF
    set -eux -o pipefail

    # Create system user and group.
    getent group "${MANAGER_USER}"  || /usr/sbin/groupadd -r "${MANAGER_USER}"
    getent passwd "${MANAGER_USER}" || /usr/sbin/useradd -g "${MANAGER_USER}" -d "/var/lib/${MANAGER_USER}" -s $(command -v nologin) -r "${MANAGER_USER}"

    # Add public key to authorized_keys.
    mkdir -p "/var/lib/${MANAGER_USER}/.ssh"
    grep "${MANAGER_PUBLIC_KEY}" "/var/lib/${MANAGER_USER}/.ssh/authorized_keys" || echo -e "# Added by Scylla Manager\n${MANAGER_PUBLIC_KEY}" >> "/var/lib/${MANAGER_USER}/.ssh/authorized_keys"

    # Set owner to manager user.
    chown -R "${MANAGER_USER}:${MANAGER_USER}" "/var/lib/${MANAGER_USER}/.ssh"
EOF
    then
        echo "${host}	OK"
    else
        echo "${host}	FAILED"
        ret=1
    fi
done

exit ${ret}
