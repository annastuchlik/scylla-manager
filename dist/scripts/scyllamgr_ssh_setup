#!/usr/bin/env bash
#
# Copyright 2018 ScyllaDB
#

set -eu -o pipefail

print_usage() {
    echo "scyllamgr_ssh_setup [--ssh-user <username>] [--ssh-identity-file <path to private key>] [--ssh-config-file <path to SSH config file>] [--create-user <username>] [--single-node] [--debug] SCYLLA_NODE_IP"
    echo "  -u --ssh-user <username>		username used to connect to Scylla nodes, must be a sudo enabled user"
    echo "  -i --ssh-identity-file <file>		path to SSH identity file (private key) for user"
    echo "  -c --ssh-config-file <file>		path to alternate SSH configuration file, see man ssh_config"
    echo "     --create-user <username>		username that will be created on Scylla nodes, default ${MANAGER_USER}"
    echo "     --single-node			setup the given node only, skip discovery of all the cluster nodes"
    echo "     --debug				display debug info"
}

die() {
    echo -e "$@\n"
    print_usage
    exit 1
}

HOSTS=()
HOST=""

SSH_USER=""
SSH_IDENTITY_FILE=""
SSH_CONFIG_FILE=""

MANAGER_USER="scylla-manager"
SINGLE_NODE=0

OUTPUT="/dev/null"
CURL_OPTS="-sS -f -o /dev/null"
SSH_OPTS="-q -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

while [[ $# > 0 ]]; do
    case "$1" in
        "-u"|"--ssh-user")
            SSH_USER="$2"
            shift 2
            ;;
        "-i"|"--ssh-identity-file")
            SSH_IDENTITY_FILE="$2"
            shift 2
            ;;
        "-c"|"--ssh-config-file")
            SSH_CONFIG_FILE="$2"
            shift 2
            ;;
        "--create-user")
            MANAGER_USER=$2
            shift 2
            ;;
        "--single-node")
            SINGLE_NODE=1
            shift 1
            ;;
        "--debug")
            OUTPUT=/dev/stderr
            CURL_OPTS+=" -v"
            SSH_OPTS+=" -v"
            shift 1
            ;;
        "-h" | "--help")
            print_usage
            exit 0
            ;;
        -*)
            die "unknown option $1"
            ;;
        *)
            HOSTS+=($1)
            shift 1
    esac
done

function ephemeral_port() {
    low_bound=49152
    range=16384
    while true; do
        p=$[${low_bound} + (${RANDOM} % ${range})]
        if ! fuser -s -n tcp ${p}; then
            echo ${p}
            break
        fi
    done
}

API_LOCAL_PORT=$(ephemeral_port)
API_REMOTE_PORT="10000"

# Validate inputs

if [[ ${#HOSTS[@]} == 0 ]]; then
    die "provide IP address of a node in a cluster to setup"
fi
HOST=${HOSTS[0]}

if [[ -n "${SSH_IDENTITY_FILE}" && (! -f "${SSH_IDENTITY_FILE}" || ! -r "${SSH_IDENTITY_FILE}") ]]; then
    die "failed to read file ${SSH_IDENTITY_FILE}"
fi

if [[ -n "${SSH_CONFIG_FILE}" && (! -f "${SSH_CONFIG_FILE}" || ! -r "${SSH_CONFIG_FILE}") ]]; then
    die "failed to read file ${SSH_CONFIG_FILE}"
fi

if [[ -z "${MANAGER_USER}" ]]; then
    die "empty new user provided"
fi

# Create manager SSH key if needed

MANAGER_IDENTITY_FILE=~/.ssh/${MANAGER_USER}.pem

if [[ ! -f "${MANAGER_IDENTITY_FILE}" ]]; then
    echo "> Generating a new SSH key pair ('${MANAGER_IDENTITY_FILE}' '${MANAGER_IDENTITY_FILE}.pub')"
    mkdir -p $(dirname ${MANAGER_IDENTITY_FILE})
    if ! ssh-keygen -t rsa -b 2048 -N "" -f "${MANAGER_IDENTITY_FILE}" &> "${OUTPUT}" && chmod 0400 "${MANAGER_IDENTITY_FILE}"; then
        die "failed to generate private key ${MANAGER_IDENTITY_FILE}"
    fi
fi

if [[ ! -f "${MANAGER_IDENTITY_FILE}.pub" || ! -r "${MANAGER_IDENTITY_FILE}.pub" ]]; then
    die "failed to read file ${MANAGER_IDENTITY_FILE}.pub"
fi

# Decorate SSH_OPTS with options

ROOT_SSH_OPTS=${SSH_OPTS}

if [[ -n ${SSH_IDENTITY_FILE} ]]; then
    ROOT_SSH_OPTS+=" -i ${SSH_IDENTITY_FILE}"
fi

if [[ -n ${SSH_CONFIG_FILE} ]]; then
    ROOT_SSH_OPTS+=" -F ${SSH_CONFIG_FILE}"
fi

# Append @ to user to support passing empty user to ssh.
# User can be configured in the SSH config file.

if [[ -n ${SSH_USER} ]]; then
    SSH_USER+="@"
fi

# Discover cluster topology

if [[ ${SINGLE_NODE} == 0 ]]; then
    echo "> Discovering all the cluster nodes"
    if ! HOSTS=`ssh ${ROOT_SSH_OPTS} "${SSH_USER}${HOST}" 2> "${OUTPUT}" curl -sS -f 0.0.0.0:${API_REMOTE_PORT}/storage_service/host_id | jq -r '.[].key' | sort`; then
        die "failed to access Scylla REST API via ${SSH_USER}${1}"
    fi
fi

# Load manager SSH public key

MANAGER_PUBLIC_KEY=$(<"${MANAGER_IDENTITY_FILE}.pub")

# Distribute SSH keys and create users

echo "> Creating user '${MANAGER_USER}'"

ret=0

for host in ${HOSTS}; do
    if ssh ${ROOT_SSH_OPTS} "${SSH_USER}${host}" &> "${OUTPUT}" sudo su - << EOF
    set -eux -o pipefail

    # Add /sbin to PATH for searching to support Scylla AMI
    SHELL=\$(PATH=\${PATH}:/sbin command -v nologin)

    # Create system user and group
    getent group "${MANAGER_USER}"  || /usr/sbin/groupadd -r "${MANAGER_USER}"
    getent passwd "${MANAGER_USER}" || /usr/sbin/useradd -g "${MANAGER_USER}" -d "/var/lib/${MANAGER_USER}" -s \${SHELL} -r "${MANAGER_USER}"

    # Force change shell
    chsh -s \${SHELL} "${MANAGER_USER}"

    # Add public key to authorized_keys
    mkdir -p "/var/lib/${MANAGER_USER}/.ssh"
    grep "${MANAGER_PUBLIC_KEY}" "/var/lib/${MANAGER_USER}/.ssh/authorized_keys" || echo -e "# Added by Scylla Manager\n${MANAGER_PUBLIC_KEY}" >> "/var/lib/${MANAGER_USER}/.ssh/authorized_keys"

    # Set owner to manager user
    chown -R "${MANAGER_USER}:${MANAGER_USER}" "/var/lib/${MANAGER_USER}/.ssh"
EOF
    then
        echo "${host}	OK"
    else
        echo "${host}	FAILED"
        ret=1
    fi
done

echo "> Testing Scylla API connectivity"

if fuser -s -n tcp ${API_LOCAL_PORT}; then
    die "port ${API_LOCAL_PORT} is used"
fi

for host in ${HOSTS}; do
    if ! ssh -i "${MANAGER_IDENTITY_FILE}" -N -f ${SSH_OPTS} -L ${API_LOCAL_PORT}:0.0.0.0:${API_REMOTE_PORT} "${MANAGER_USER}@${host}" &> ${OUTPUT}; then
        echo "${host}	SSH FAILED"
        ret=1
    else
        if curl ${CURL_OPTS} "localhost:${API_LOCAL_PORT}/storage_service/cluster_name" &> ${OUTPUT}; then
            echo "${host}	OK"
        else
            echo "${host}	FAILED"
                ret=1
        fi
        fuser -s -n tcp ${API_LOCAL_PORT} -k -15 ||:
    fi
done

if [[ ${ret} != 0 ]]; then
    echo "> Done with errors, run with --debug flag to see what failed"
else
    echo "> Done!"
    echo "> To add the cluster to Scylla Manager run: sctool cluster add --host ${HOST} --ssh-user '${MANAGER_USER}' --ssh-identity-file '${MANAGER_IDENTITY_FILE}'"
fi

exit ${ret}
