#!/usr/bin/env bash
#
# Copyright 2018 ScyllaDB
#

set -eu -o pipefail

OUTPUT=/dev/null

SSH_USER="scylla-manager"
SSH_IDENTITY_FILE=""
SSH_OPTS="-q -o BatchMode=yes -o ConnectTimeout=5 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

API_LOCAL_PORT="10010"
API_REMOTE_PORT="10000"
API_TEST_URL="/storage_service/cluster_name"

CURL_OPTS="-sS -f -o /dev/null"

print_usage() {
    echo "scyllamgr_ssh_test -u <ssh username> -i <path to ssh private key> HOST..."
    echo "  -i --identity-file			path to identity file containing SSH private key"
    echo "  -p --local-port			local port used by the script for SSH tunneling, default ${API_LOCAL_PORT}"
    echo "  -u --user				SSH user name used to connect to hosts, default ${SSH_USER}"
    echo "  -v --verbose				display debug info"
}

while [[ $# > 0 ]]; do
    case "$1" in
        "-u"|"--user")
            SSH_USER="$2"
            shift 2
            ;;
        "-i"|"--identity-file")
            SSH_IDENTITY_FILE="$2"
            shift 2
            ;;
        "-p"|"--local-port")
            API_LOCAL_PORT="$2"
            shift 2
            ;;
        "-v"|"--verbose")
            OUTPUT=/dev/stderr
            SSH_OPTS+=" -v"
            CURL_OPTS+=" -v"
            shift 1
            ;;
        "-h" | "--help")
            print_usage
            exit 0
            ;;
        *)
            break
    esac
done

# Validate inputs

if [[ $# == 0 ]]; then
    echo -e "no hosts to test\n"
    print_usage
    exit 1
fi

if [[ -z "${SSH_USER}" ]]; then
    echo -e "missing --user\n"
    print_usage
    exit 1
fi

if [[ -z "${SSH_IDENTITY_FILE}" ]]; then
    echo -e "missing --identity-file\n"
    print_usage
    exit 1
fi

if [[ ! -f "${SSH_IDENTITY_FILE}" || ! -r "${SSH_IDENTITY_FILE}" ]]; then
    echo -e "cannot read file ${SSH_IDENTITY_FILE}\n"
    print_usage
    exit 1
fi

if fuser -s -n tcp ${API_LOCAL_PORT}; then
    echo "port ${API_LOCAL_PORT} is used"
    exit 1
fi

ret=0

for host in $@; do
    if ! ssh -i "${SSH_IDENTITY_FILE}" -N -f ${SSH_OPTS} -L ${API_LOCAL_PORT}:localhost:${API_REMOTE_PORT} "${SSH_USER}@${host}"; then
        echo "${host}	FAILED TO SSH"
    else
        if curl ${CURL_OPTS} "${host}:${API_REMOTE_PORT}${API_TEST_URL}" &> ${OUTPUT}; then
            echo "${host}	WARNING - host exposes Scylla API"
        elif curl ${CURL_OPTS} "localhost:${API_LOCAL_PORT}${API_TEST_URL}" &> ${OUTPUT}; then
            echo "${host}	OK"
        else
            echo "${host}	FAILED"
                ret=1
        fi
        fuser -s -n tcp ${API_LOCAL_PORT} -k -15 ||:
    fi
done

exit ${ret}
