# Scylla Manager config YAML

# Bind REST API to the specified TCP address using HTTP protocol.
http: 127.0.0.1:56080

# Bind REST API to the specified TCP address using HTTPS protocol.
#https: 127.0.0.1:56443

# TLS certificate and key files to use with HTTPS. To regenerate the files use
# scyllamgr_ssl_cert_gen script shipped with the Scylla Manager.
#tls_cert_file: /var/lib/scylla-manager/scylla_manager.crt
#tls_key_file: /var/lib/scylla-manager/scylla_manager.key
#
# CA to validate client certificates, if set client must present a certificate
# signed by the CA.
#tls_ca_file:

# Bind prometheus API to the specified TCP address using HTTP protocol.
# By default it binds to all network interfaces but you can restrict it
# by specifying it like this 127:0.0.1:56090 or any other combination
# of ip and port.
#prometheus: ':56090'

# Whenever you update Prometheus scrape_interval for Scylla Manager
# also update this value.
# This would allow for Scylla Manager to produce aggregated metrics
# at just right pace for Prometheus to consume them.
#prometheus_scrape_interval: 5s

# Debug server that allows to run pporf profiling on demand on a live system.
#debug: 127.0.0.1:56112

# Logging configuration.
#logger:
# Available log levels are error, info and debug.
#  level: info

# Scylla Manager database, used to store management data.
#database:
#  hosts:
#    - 127.0.0.1
#
# Enable or disable client/server encryption.
#  ssl: false
#
# Database credentials.
#  user: user
#  password: password
#
# Local datacenter name, specify if using a remote, multi-dc cluster.
#  local_dc:
#
# Keyspace for management data.
#  keyspace: scylla_manager
#  replication_factor: 1
#
# Database connection timeout.
#  timeout: 600ms
#
# Should we use a token aware driver, this would make manager access appropriate
# host and shard to execute a request eliminating request routing.
#  token_aware: true

# Optional custom client/server encryption options.
#ssl:
# CA certificate used to validate server cert. If not set will use he host's root CA set.
#  cert_file:
#
# Verify the hostname and server cert.
#  validate: true
#
# Client certificate and key in PEM format. It has to be provided when
# client_encryption_options.require_client_auth=true is set on server.
#  user_cert_file:
#  user_key_file

# Healthcheck service configuration.
#healthcheck:
# Timeout for CQL status checks.
#  timeout: 250ms
#  ssl_timeout: 750ms

# Backup service configuration.
#backup:
# Minimal amount of free disk space required to take a snapshot.
#  disk_space_free_min_percent: 10
#
# Frequency Scylla Manager poll Scylla node for backup upload status.
#  poll_interval: 1s
#  max_age: 12h

# Repair service configuration.
#repair:
# Number of segments repaired by Scylla in a single repair command. Increase
# this value to make repairs faster, note that this may result in increased load
# on the cluster.
#  segments_per_repair: 1
#
# Maximal number of shards on a host repaired at the same time. By default all
# shards are repaired in parallel.
#  shard_parallel_max: 0
#
# Maximal allowed number of failed segments per shard. In case of a failure
# to repair a segment Scylla Manager will try to repair it multiple times
# depending on the specified number of retries (default 3). If the
# shard_failed_segments_max limit is exceeded repair task will immediately
# fail and the next repair run will start repair procedure from the beginning.
#  shard_failed_segments_max: 25
#
# In case of an error hold back repair for the specified amount of time.
#  error_backoff: 5m
#
# Frequency Scylla Manager poll Scylla node for repair command status.
#  poll_interval: 200ms
#
# Maximal time a paused repair is considered fresh and can be continued,
# if exceeded repair will start from the beginning.
#  age_max: 36h
#
# Distribution of data among cores (shards) within a node.
# Copy value from Scylla configuration file.
#  murmur3_partitioner_ignore_msb_bits: 12
